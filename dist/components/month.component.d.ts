import { ChangeDetectorRef, EventEmitter, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CalendarDay, CalendarMonth, CalendarOriginal } from '../calendar.model';
import * as i0 from "@angular/core";
export declare const MONTH_VALUE_ACCESSOR: any;
export declare class MonthComponent implements ControlValueAccessor, AfterViewInit {
    ref: ChangeDetectorRef;
    componentMode: boolean;
    month: CalendarMonth;
    pickMode: any;
    isSaveHistory: boolean;
    id: any;
    readonly: boolean;
    color: string;
    change: EventEmitter<CalendarDay[]>;
    select: EventEmitter<CalendarDay>;
    selectStart: EventEmitter<CalendarDay>;
    selectEnd: EventEmitter<CalendarDay>;
    _date: Array<CalendarDay | null>;
    _isInit: boolean;
    _onChanged: Function;
    _onTouched: Function;
    readonly DAY_DATE_FORMAT = "MMMM dd, yyyy";
    get _isRange(): boolean;
    constructor(ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    get value(): CalendarDay[];
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    trackByTime(index: number, item: CalendarOriginal): number;
    isEndSelection(day: CalendarDay): boolean;
    getDayLabel(day: CalendarDay): Date;
    isBetween(day: CalendarDay): boolean;
    isStartSelection(day: CalendarDay): boolean;
    isSelected(time: number): boolean;
    onSelected(item: CalendarDay): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MonthComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MonthComponent, "ion-calendar-month", never, { "componentMode": "componentMode"; "month": "month"; "pickMode": "pickMode"; "isSaveHistory": "isSaveHistory"; "id": "id"; "readonly": "readonly"; "color": "color"; }, { "change": "change"; "select": "select"; "selectStart": "selectStart"; "selectEnd": "selectEnd"; }, never, never, false>;
}
